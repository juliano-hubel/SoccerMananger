// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoccerManager.Infra.Context.DataContext;

namespace SoccerManager.Infra.Migrations
{
    [DbContext(typeof(SoccerManagerDataContext))]
    partial class SoccerManagerDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SoccerManager.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CellPhoneNumber");

                    b.Property<string>("City");

                    b.Property<string>("Neighborhood");

                    b.Property<int>("Number");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("State");

                    b.Property<string>("Street");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Administrator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddressId");

                    b.Property<Guid?>("BankAccountId");

                    b.Property<DateTime>("BirthDate");

                    b.Property<DateTime>("DateEntered");

                    b.Property<decimal>("Earnings");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int>("Gender");

                    b.Property<string>("Notes");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BankAccountId");

                    b.ToTable("Admnistrator");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountNumber")
                        .IsRequired();

                    b.Property<string>("Agency")
                        .IsRequired();

                    b.Property<string>("BankName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CardType");

                    b.Property<Guid?>("MatchId");

                    b.Property<Guid?>("MatchId1");

                    b.Property<int>("PlayerNumber");

                    b.Property<int>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId1");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Classroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DayOfWeek");

                    b.Property<DateTime>("End");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.ToTable("Classroom");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.ClassroomHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClassroomId");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Notes");

                    b.Property<DateTime>("StartDate");

                    b.Property<Guid?>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassroomHistory");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Fault", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("MatchId");

                    b.Property<Guid?>("MatchId1");

                    b.Property<int>("PlayerNumber");

                    b.Property<int>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId1");

                    b.ToTable("Fault");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("MatchId");

                    b.Property<Guid?>("MatchId1");

                    b.Property<int>("PlayerNumber");

                    b.Property<int>("Time");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("MatchId1");

                    b.ToTable("Goal");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Health", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Allergies");

                    b.Property<string>("BloodPressure");

                    b.Property<string>("Disabilities");

                    b.Property<decimal>("Height");

                    b.Property<string>("Notes");

                    b.Property<decimal>("Weight");

                    b.HasKey("Id");

                    b.ToTable("Health");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Match", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adversary")
                        .IsRequired();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("FotoSumula");

                    b.Property<string>("Place")
                        .IsRequired();

                    b.Property<Guid?>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Number");

                    b.Property<Guid?>("StudentId");

                    b.Property<Guid?>("TeamId");

                    b.Property<Guid?>("TeamId1");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddressId");

                    b.Property<DateTime>("BirthDate");

                    b.Property<Guid?>("ClassroomHistoryId");

                    b.Property<Guid?>("ClassroomHistoryId1");

                    b.Property<Guid?>("ClassroomHistoryId2");

                    b.Property<DateTime>("DateEntered");

                    b.Property<string>("Email");

                    b.Property<int>("Gender");

                    b.Property<Guid?>("HealthId");

                    b.Property<string>("Notes");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClassroomHistoryId");

                    b.HasIndex("ClassroomHistoryId1");

                    b.HasIndex("ClassroomHistoryId2");

                    b.HasIndex("HealthId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.StudentCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("MaxAge");

                    b.HasKey("Id");

                    b.ToTable("StudentCategory");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.StudentsClassrooms", b =>
                {
                    b.Property<Guid>("StudentId");

                    b.Property<Guid>("ClassroomId");

                    b.Property<Guid>("Id");

                    b.HasKey("StudentId", "ClassroomId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("ClassroomId");

                    b.ToTable("StudentClassrooms");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("AddressId");

                    b.Property<Guid?>("BankAccountId");

                    b.Property<DateTime>("BirthDate");

                    b.Property<DateTime>("DateEntered");

                    b.Property<decimal>("Earnings");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int>("Gender");

                    b.Property<string>("Notes");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BankAccountId");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Notes");

                    b.Property<Guid?>("StudentCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("StudentCategoryId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Administrator", b =>
                {
                    b.HasOne("SoccerManager.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SoccerManager.Domain.Entities.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.OwnsOne("SoccerManager.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("AdministratorId");

                            b1.Property<string>("CPF")
                                .IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired();

                            b1.Property<string>("LastName")
                                .IsRequired();

                            b1.Property<string>("RG")
                                .IsRequired();

                            b1.HasKey("AdministratorId");

                            b1.ToTable("Admnistrator");

                            b1.HasOne("SoccerManager.Domain.Entities.Administrator")
                                .WithOne("Name")
                                .HasForeignKey("SoccerManager.Domain.ValueObjects.Name", "AdministratorId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Card", b =>
                {
                    b.HasOne("SoccerManager.Domain.Entities.Match")
                        .WithMany("AdversaryCards")
                        .HasForeignKey("MatchId");

                    b.HasOne("SoccerManager.Domain.Entities.Match")
                        .WithMany("TeamCards")
                        .HasForeignKey("MatchId1");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.ClassroomHistory", b =>
                {
                    b.HasOne("SoccerManager.Domain.Entities.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId");

                    b.HasOne("SoccerManager.Domain.Entities.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Fault", b =>
                {
                    b.HasOne("SoccerManager.Domain.Entities.Match")
                        .WithMany("AdversaryFaults")
                        .HasForeignKey("MatchId");

                    b.HasOne("SoccerManager.Domain.Entities.Match")
                        .WithMany("TeamFaults")
                        .HasForeignKey("MatchId1");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Goal", b =>
                {
                    b.HasOne("SoccerManager.Domain.Entities.Match")
                        .WithMany("AdversaryGoals")
                        .HasForeignKey("MatchId");

                    b.HasOne("SoccerManager.Domain.Entities.Match")
                        .WithMany("TeamGoals")
                        .HasForeignKey("MatchId1");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Match", b =>
                {
                    b.HasOne("SoccerManager.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Player", b =>
                {
                    b.HasOne("SoccerManager.Domain.Entities.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("SoccerManager.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("SoccerManager.Domain.Entities.Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId1");
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Student", b =>
                {
                    b.HasOne("SoccerManager.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SoccerManager.Domain.Entities.ClassroomHistory")
                        .WithMany("MarkedUpStudents")
                        .HasForeignKey("ClassroomHistoryId");

                    b.HasOne("SoccerManager.Domain.Entities.ClassroomHistory")
                        .WithMany("PresentStudents")
                        .HasForeignKey("ClassroomHistoryId1");

                    b.HasOne("SoccerManager.Domain.Entities.ClassroomHistory")
                        .WithMany("TemporaryStudents")
                        .HasForeignKey("ClassroomHistoryId2");

                    b.HasOne("SoccerManager.Domain.Entities.Health", "Health")
                        .WithMany()
                        .HasForeignKey("HealthId");

                    b.OwnsOne("SoccerManager.Domain.ValueObjects.Payment", "Payment", b1 =>
                        {
                            b1.Property<Guid>("StudentId");

                            b1.Property<int>("ExpirationDay");

                            b1.Property<decimal>("Fee");

                            b1.HasKey("StudentId");

                            b1.ToTable("Student");

                            b1.HasOne("SoccerManager.Domain.Entities.Student")
                                .WithOne("Payment")
                                .HasForeignKey("SoccerManager.Domain.ValueObjects.Payment", "StudentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("SoccerManager.Domain.ValueObjects.Name", "Father", b1 =>
                        {
                            b1.Property<Guid>("StudentId");

                            b1.Property<string>("CPF")
                                .IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired();

                            b1.Property<string>("LastName")
                                .IsRequired();

                            b1.Property<string>("RG")
                                .IsRequired();

                            b1.HasKey("StudentId");

                            b1.ToTable("Student");

                            b1.HasOne("SoccerManager.Domain.Entities.Student")
                                .WithOne("Father")
                                .HasForeignKey("SoccerManager.Domain.ValueObjects.Name", "StudentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("SoccerManager.Domain.ValueObjects.Name", "Mother", b1 =>
                        {
                            b1.Property<Guid>("StudentId");

                            b1.Property<string>("CPF")
                                .IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired();

                            b1.Property<string>("LastName")
                                .IsRequired();

                            b1.Property<string>("RG")
                                .IsRequired();

                            b1.HasKey("StudentId");

                            b1.ToTable("Student");

                            b1.HasOne("SoccerManager.Domain.Entities.Student")
                                .WithOne("Mother")
                                .HasForeignKey("SoccerManager.Domain.ValueObjects.Name", "StudentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("SoccerManager.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("StudentId");

                            b1.Property<string>("CPF");

                            b1.Property<string>("FirstName")
                                .IsRequired();

                            b1.Property<string>("LastName")
                                .IsRequired();

                            b1.Property<string>("RG");

                            b1.HasKey("StudentId");

                            b1.ToTable("Student");

                            b1.HasOne("SoccerManager.Domain.Entities.Student")
                                .WithOne("Name")
                                .HasForeignKey("SoccerManager.Domain.ValueObjects.Name", "StudentId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.StudentsClassrooms", b =>
                {
                    b.HasOne("SoccerManager.Domain.Entities.Classroom", "Classroom")
                        .WithMany("StudentsClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SoccerManager.Domain.Entities.Student", "Student")
                        .WithMany("StudentsClassrooms")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Teacher", b =>
                {
                    b.HasOne("SoccerManager.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SoccerManager.Domain.Entities.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.OwnsOne("SoccerManager.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("TeacherId");

                            b1.Property<string>("CPF");

                            b1.Property<string>("FirstName")
                                .IsRequired();

                            b1.Property<string>("LastName")
                                .IsRequired();

                            b1.Property<string>("RG");

                            b1.HasKey("TeacherId");

                            b1.ToTable("Teacher");

                            b1.HasOne("SoccerManager.Domain.Entities.Teacher")
                                .WithOne("Name")
                                .HasForeignKey("SoccerManager.Domain.ValueObjects.Name", "TeacherId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("SoccerManager.Domain.Entities.Team", b =>
                {
                    b.HasOne("SoccerManager.Domain.Entities.StudentCategory", "StudentCategory")
                        .WithMany()
                        .HasForeignKey("StudentCategoryId");
                });
#pragma warning restore 612, 618
        }
    }
}
